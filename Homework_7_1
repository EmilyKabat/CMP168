public class Homework7_1 {
    public static int fib(int n ) {
        if (n == 0) {
            return 0;
        }
        else if (n == 1) {
            return 1;
        }
        else {
            return fib(n - 1) + fib(n - 2);
        }
    }
    public static int getPowerOfXtoN(int xBase, int nExp) {
        if (nExp == 0) {
            return 1;
        }
        else {
            return getPowerOfXtoN(xBase, nExp - 1) * xBase;
        }
    }
    public static int binarySearch(String target, String[] words) {
        for (int i = 0; i < words.length / 2; i++) {
            if (target.equals(words[i])) {
                return i;
            }
            if (target.equals(words[words.length - i - 1])) {
                return words.length - i;
            }
        }
        return -1;
    }
    public static int organizeParade(int paradeLength) {
        if ( paradeLength == 1) {
            return 2;
        }
        else if (paradeLength == 2) {
            return 3;
        }
        else {
            return organizeParade(paradeLength - 1) + organizeParade(paradeLength - 2);
        }
    }
    public static int numJarsNeeded(int candyCount, int jarCapacity) {
        if (candyCount == 0) {
            return 0;
        }
        else if (candyCount <= jarCapacity) {
            return 1;
        }
        else if ((double) candyCount / 2 <= jarCapacity) {
            return 2;
        }
        else {
            if (candyCount % 2 == 0) {
                return 2 * numJarsNeeded(candyCount / 2, jarCapacity);
            }
            else {
                return (numJarsNeeded((candyCount + 1) / 2, jarCapacity) + 1);
            }
        }

    }
}
